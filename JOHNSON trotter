#include <stdio.h>

#define LEFT -1
#define RIGHT 1

void printPermutation(int perm[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", perm[i]);
    }
    printf("\n");
}

int getMobile(int perm[], int dir[], int n) {
    int mobile = 0;
    for (int i = 0; i < n; i++) {
        int next = i + dir[i];
        if (next >= 0 && next < n && perm[i] > perm[next]) {
            if (perm[i] > mobile) mobile = perm[i];
        }
    }
    return mobile;
}

int getPosition(int perm[], int n, int mobile) {
    for (int i = 0; i < n; i++) {
        if (perm[i] == mobile) return i;
    }
    return -1; // Should not happen
}

void generatePermutations(int n) {
    int perm[n], dir[n];

    for (int i = 0; i < n; i++) {
        perm[i] = i + 1;
        dir[i] = LEFT;
    }

    printPermutation(perm, n);

    while (1) {
        int mobile = getMobile(perm, dir, n);
        if (mobile == 0) break;

        int pos = getPosition(perm, n, mobile);
        int swapPos = pos + dir[pos];

        // Swap positions
        int temp = perm[pos];
        perm[pos] = perm[swapPos];
        perm[swapPos] = temp;

        // Swap directions
        temp = dir[pos];
        dir[pos] = dir[swapPos];
        dir[swapPos] = temp;

        // Reverse directions of elements greater than the mobile integer
        for (int i = 0; i < n; i++) {
            if (perm[i] > mobile) dir[i] = -dir[i];
        }

        printPermutation(perm, n);
    }
}

int main() {
    int n;
    printf("Enter number of elements to permute: ");
    scanf("%d", &n);

    if (n <= 0 || n > 10) {
        printf("Please enter a number between 1 and 10.\n");
        return 1;
    }

    generatePermutations(n);
    return 0;
}




O/p:
Enter number of elements to permute: 3
1 2 3 
1 3 2 
3 1 2 
3 2 1 
2 3 1 
2 1 3 
