#include <stdio.h>

int n, m, w[10], p[10], v[10][10];

void knapsack(int, int, int[], int[]);
int max(int, int);

int main() {
    int i, j;

    printf("Enter the number of items: ");
    scanf("%d", &n);

    printf("Enter the capacity of the knapsack: ");
    scanf("%d", &m);

    printf("Enter weights: ");
    for(i = 0; i < n; i++) {
        scanf("%d", &w[i]);
    }

    printf("Enter profits: ");
    for(i = 0; i < n; i++) {
        scanf("%d", &p[i]);
    }

    knapsack(n, m, w, p);

    printf("Optimal Solution Table:\n");
    for(i = 0; i <= n; i++) {
        for(j = 0; j <= m; j++) {
            printf("%d ", v[i][j]);
        }
        printf("\n");
    }

    printf("Maximum Profit: %d\n", v[n][m]);

    return 0;
}

void knapsack(int n, int m, int w[], int p[]) {
    int i, j;

    for(i = 0; i <= n; i++) {
        for(j = 0; j <= m; j++) {
            if(i == 0 || j == 0) {
                v[i][j] = 0;
            } else if(w[i-1] <= j) {
                v[i][j] = max(v[i-1][j], v[i-1][j - w[i-1]] + p[i-1]);
            } else {
                v[i][j] = v[i-1][j];
            }
        }
    }
}

int max(int a, int b) {
    return (a > b) ? a : b;
}

OUTPUT:

Enter the number of items: 3
Enter the capacity of the knapsack: 5
Enter weights: 1 3 4
Enter profits: 1500 2000 3000

Optimal Solution Table:
0 0 0 0 0 0 
0 1500 1500 1500 1500 1500 
0 1500 1500 2000 2000 3500 
0 1500 1500 2000 3000 3500 
Maximum Profit: 3500
